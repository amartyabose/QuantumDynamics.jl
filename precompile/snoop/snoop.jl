precompile(Tuple{typeof(Base.getindex), Base.RefValue{Bool}})
precompile(Tuple{typeof(Base.escape_string), String})
precompile(Tuple{Type{PyCall.PyError}, String, PyCall.PyError})
precompile(Tuple{typeof(ColorTypes.__init__)})
precompile(Tuple{Base.var"##Timer#701", Float64, Type{Base.Timer}, PyCall.var"#7#8"{Int64, PyCall.PyObject}, Float64})
precompile(Tuple{typeof(Base.isimmutable), Any})
precompile(Tuple{typeof(Base.getindex), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{typeof(Base.atreplinit), Function})
precompile(Tuple{typeof(Base.get), Base.TTY, Symbol, Bool})
precompile(Tuple{typeof(Base.unsafe_write), Base.TTY, Ptr{UInt8}, UInt64})
precompile(Tuple{Base.var"#702#703"{PyCall.var"#7#8"{Int64, PyCall.PyObject}, Base.Timer}})
precompile(Tuple{typeof(PyCall.:(â‰›)), PyCall.PyObject, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{Main.var"#3#4", REPL.LineEditREPL})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base._require_prelocked), Base.PkgId, String})
precompile(Tuple{typeof(Base._tuple_unique_fieldtypes), Any})
precompile(Tuple{typeof(Artifacts._artifact_str), Module, String, Base.SubString{String}, String, Base.Dict{String, Any}, Base.SHA1, Base.BinaryPlatforms.Platform, Any})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, String}}, String})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(OhMyREPL.__init__)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Any, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Any, Char})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Any, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(Base.delete!), Base.Set{Any}, String})
precompile(Tuple{typeof(Base.convert), Type{REPL.LineEdit.ModalInterface}, REPL.LineEdit.ModalInterface})
precompile(Tuple{typeof(Base.getindex), Array{REPL.LineEdit.TextInterface, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Base.Dict{Any, Any}}, Base.Dict{Any, Any}, Base.Dict{Char, Any}})
precompile(Tuple{Pkg.var"#4#5", REPL.LineEditREPL})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Char})
precompile(Tuple{typeof(Base.delete!), Base.Set{Any}, Char})
precompile(Tuple{typeof(REPL.run_repl), REPL.AbstractREPL, Any})
precompile(Tuple{typeof(Core.kwcall), Any, typeof(REPL.start_repl_backend), REPL.REPLBackend, Any})
precompile(Tuple{OhMyREPL.var"#1#4"})
precompile(Tuple{REPL.var"#62#68"{REPL.LineEditREPL, REPL.REPLBackendRef}})
precompile(Tuple{typeof(Base.write), Base.TTY, String})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{typeof(Base.eof), Base.TTY})
precompile(Tuple{typeof(Base.read), Base.TTY, Type{UInt8}})
precompile(Tuple{REPL.LineEdit.var"#27#28"{OhMyREPL.Prompt.var"#2#29", String}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:rule,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Type{NamedTuple{(:skip_newlines,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:skip_newlines, :skip_whitespace), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{Type{NamedTuple{(:kind, :flags), T} where T<:Tuple}, Tuple{JuliaSyntax.Kind, UInt16}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:kind, :flags), Tuple{JuliaSyntax.Kind, UInt16}}})
precompile(Tuple{Type{NamedTuple{(:error,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:where_enabled,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:range_colon_enabled, :space_sensitive, :where_enabled, :whitespace_newline, :for_generator), T} where T<:Tuple}, NTuple{5, Bool}})
precompile(Tuple{Type{NamedTuple{(:range_colon_enabled, :space_sensitive, :where_enabled, :whitespace_newline), T} where T<:Tuple}, NTuple{4, Bool}})
precompile(Tuple{Type{NamedTuple{(:kind,), T} where T<:Tuple}, Tuple{JuliaSyntax.Kind}})
precompile(Tuple{Type{NamedTuple{(:skip_newlines, :error), T} where T<:Tuple}, Tuple{Bool, String}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:skip_newlines, :error), Tuple{Bool, String}}})
precompile(Tuple{Base.var"##s92#239", Vararg{Any, 5}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:error,), Tuple{String}}}})
precompile(Tuple{typeof(Base.tail), Tuple{UInt32, UInt32}})
precompile(Tuple{Type{NamedTuple{(:whitespace_newline, :space_sensitive, :end_symbol), T} where T<:Tuple}, Tuple{Bool, Bool, Bool}})
precompile(Tuple{typeof(Base.:(+)), UInt32, Int64})
precompile(Tuple{typeof(Base.:(&)), Int64, UInt16})
precompile(Tuple{Type{NamedTuple{(:remap_kind,), T} where T<:Tuple}, Tuple{JuliaSyntax.Kind}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:remap_kind,), Tuple{JuliaSyntax.Kind}}}})
precompile(Tuple{Type{NamedTuple{(:end_symbol,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:emit_dot_node,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:skip_parens,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:warning,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:for_generator,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:whitespace, :warning), T} where T<:Tuple}, Tuple{Bool, String}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:whitespace, :warning), Tuple{Bool, String}}})
precompile(Tuple{Type{NamedTuple{(:flags,), T} where T<:Tuple}, Tuple{UInt16}})
precompile(Tuple{Type{NamedTuple{(:whitespace, :error), T} where T<:Tuple}, Tuple{Bool, String}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:whitespace, :error), Tuple{Bool, String}}})
precompile(Tuple{Type{NamedTuple{(:range_colon_enabled,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{OhMyREPL.Prompt.var"#2#29", Any, Any, Any})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.Unicode.textwidth), String})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(OhMyREPL.untokenize_with_ANSI), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, OhMyREPL.PassHandler, Array{JuliaSyntax.Token, 1}, String, Int64})
precompile(Tuple{typeof(Base.getproperty), REPL.LineEdit.ModeState, Symbol})
precompile(Tuple{typeof(Base.position), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.seek), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:keep,), Tuple{Bool}}, typeof(Base.readline), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.divrem), Int64, Int64})
precompile(Tuple{REPL.LineEdit.var"#27#28"{OhMyREPL.Prompt.var"#22#49", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#22#49", Any, Any, Any})
precompile(Tuple{typeof(Base.write), Base.TTY, UInt8})
precompile(Tuple{typeof(REPL.LineEdit.mode), REPL.LineEdit.MIState})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{Base.PkgId, Union{Nothing, String}}, Union{Nothing, Tuple{Union{Nothing, String}, Union{Nothing, String}}}}, Tuple{Nothing, String}, Tuple{Base.PkgId, Nothing}})
precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:throw_error,), Tuple{Bool}}, typeof(Base.Libc.Libdl.dlopen), String})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Ptr{Nothing}}, Nothing})
precompile(Tuple{typeof(HDF5.API.__init__)})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{typeof(Requires.loaded), Base.PkgId})
precompile(Tuple{typeof(Requires.callbacks), Base.PkgId})
precompile(Tuple{typeof(HDF5.API.try_close_finalizer), HDF5.FileAccessProperties})
precompile(Tuple{CpuId.var"#cacheinclusive_level#6", UInt32, UInt32})
precompile(Tuple{typeof(SciMLBase.__init__)})
precompile(Tuple{typeof(Distributions.TestUtils.__init__)})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.TTY, Pair{Symbol, Array{Tuple{String, Int64}, 1}}})
precompile(Tuple{REPL.var"#57#58"{REPL.LineEditREPL, Pair{Any, Bool}, Bool, Bool}, Any})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.TTY}, Pair{Symbol, Module}})
precompile(Tuple{REPL.LineEdit.var"#27#28"{OhMyREPL.Prompt.var"#21#48", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#21#48", Any, Any, Any})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Int64}, Int64, Int64})
precompile(Tuple{Base.var"#647#648"{Task}})
precompile(Tuple{REPL.var"#60#66"{REPL.REPLBackendRef}})
